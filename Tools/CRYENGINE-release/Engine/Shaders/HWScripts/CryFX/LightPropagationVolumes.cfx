// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"
#include "ShadeLib.cfi"
#include "LightPropagationVolumes.cfi"
#include "PostEffectsLib.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "NoPreview;"
           "ShaderDrawType = Custom;"
           "ShaderType = PostProcess;"
>;

//////////////////////////////////////////////////////////////////////////////////////
// Reflective shadow-map injection shader
//////////////////////////////////////////////////////////////////////////////////////

#define NORMAL_DEPTH_BIAS (0.5h)
#define LIGHT_DEPTH_BIAS (0.5h)
#define JITTERING_BIAS (0.2h)
#define COLOR_AMPLIFICATION (5.0h)

float4 g_dirToLightGridSpace < vsregister = c12; >
float4 g_smSize < vsregister = c13; >;
float4x4 g_injectionMatrix < vsregister = c14; >;	 //	g_invLightMatrix * g_gridMatrix
float4 g_dirToLight < psregister = c11; >;
float4 g_smInvPixelSize < psregister = c12; >;

#define VISAREA_CONNECTED_TO_OUTDOOR (1<<0)
#define VISAREA_IGNORE_GI (1<<1)
#define VISAREA_AFFECTED_BY_SUN (1<<2)
#define MAX_VISAREAS 32

float4 g_vVisAreasParams[MAX_VISAREAS];

sampler2D RSM_Depth_VertexSmpl : register(s0);	// vertex texture
sampler2D RSM_Normals_VertexSmpl : register(s1);	// vertex texture

struct LPVInjectRSMVsIn
{
	float2 pixelID : POSITION;
};

struct LPVInjectRSMPsIn
{
	float4 position : POSITION;
	half2 texCoord : TEXCOORDN;
	half3 normal 		: TEXCOORDN;
	//half2 att 				: TEXCOORDN;	// TODO: optimize interpolators
};

LPVInjectRSMPsIn LPVInjectRSMVS(const in LPVInjectRSMVsIn In)
{
	LPVInjectRSMPsIn Out;

	// get texture coords by vertex ID
	float2 texelPos = float2(fmod(In.pixelID.x, g_smSize.x), In.pixelID.x * g_smSize.z) * g_smSize.zw;
	Out.texCoord = texelPos;
	half2 screenPos = texelPos * float2(2.f, -2.f) - float2(1.f, -1.f);

	// sample depth and normal data
	const float depth = tex2Dlod(RSM_Depth_VertexSmpl, float4(Out.texCoord, 0, 0)).r;	
	Out.normal = tex2Dlod(RSM_Normals_VertexSmpl, float4(Out.texCoord, 0, 0)).rgb;

	Out.normal = Out.normal * 2.h - 1.h;

	// get world space position of the texel in the colored shadow map
	float4 homogGridPos = mul(g_injectionMatrix, float4(screenPos, depth, 1));
	// TODO: calc texel area coverage and precalc grid cell projection's area in light direction
	float3 gridPos = homogGridPos.xyz/homogGridPos.w;

	// align this pixel to the nearest cell in the dir to light
	// calc dir from original placement of pixel to this cell
	// TODO: optimize it
	half3 gridSpaceNormal = normalize(LPVGridDir(Out.normal)) * g_invGridSize.xyz;
	half3 alignedGridPos = gridPos;
	// TODO: make proper rounding direction and only one cell shift
	alignedGridPos += gridSpaceNormal * NORMAL_DEPTH_BIAS;
	alignedGridPos += g_dirToLightGridSpace.xyz * (LIGHT_DEPTH_BIAS/* + (In.pixelID.y * JITTERING_BIAS)*/);
	alignedGridPos.z = floor(alignedGridPos.z * g_gridSize.z) * g_invGridSize.z;

	// calc attenuation
	//Out.att = 1;//saturate(length((alignedGridPos - gridPos) * g_gridSize.xyz*2 )/sqrt(3));

	Out.position = LPVScreenPos(alignedGridPos);

	if(!IsPointInGrid(alignedGridPos))
		Out.position.xy = -2;

	return Out;
}

SHSpectralCoeffs LPVInjectRSMPS(const in LPVInjectRSMPsIn In)
{
	half3 vAlbedo = tex2D(RSM_ColorSmpl, In.texCoord).rgb;
	half3 vFlux = vAlbedo * COLOR_AMPLIFICATION * g_smInvPixelSize.x;
	// TODO: add initial light color(not only the g_PS_SunColor)
	half3 vcDiffuse = g_PS_SunColor.rgb * vFlux * saturate(dot(In.normal, g_dirToLight))/* * In.att.x*/;		// calc diffuse of VLS
	SHSpectralCoeffs res = SHMul(GetSHCosine(In.normal, true), vcDiffuse);																				// calc output SH coeffs
	SHPackAddBlend(res);
	return res;
}

technique LPVInjectRSM
{
  pass p0
  {
    VertexShader = LPVInjectRSMVS();
    PixelShader = LPVInjectRSMPS();
  }
}

//////////////////////////////////////////////////////////////////////////////////////
// Occlusion injection shader
//////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
float4		g_vFrustrumLB < vsregister = c18; >;
float4		g_vFrustrumLT < vsregister = c19; >;
float4		g_vFrustrumRB < vsregister = c20; >;
float4		g_vFrustrumRT < vsregister = c21; >;

float3 GetWorldPos( float fDepth, float3 vCamVec )
{
  return fDepth * vCamVec + PS_WorldViewPos.xyz; // Return world space position
}

struct LPVOcclusionVsIn
{
	float2 pixelID : POSITION;
};

struct LPVOcclusionPsIn
{
	float4 position			: POSITION;
	half2 texCoord			: TEXCOORDN;
	half3 normal 				: TEXCOORDN;
	half2 depthWeight		: TEXCOORDN;
};

LPVOcclusionPsIn LPVOcclusionInjectionVS(const in LPVOcclusionVsIn In)
{
	LPVOcclusionPsIn Out;

	// get texture coords by vertex ID
	float2 texelPos = float2(fmod(In.pixelID.x, g_smSize.x), In.pixelID.x * g_smSize.z) * g_smSize.zw;
	Out.texCoord = texelPos;
	half2 screenPos = texelPos * float2(2.f, -2.f) - float2(1.f, -1.f);

	// sample depth and normal data
	const float depth = tex2Dlod(RSM_Depth_VertexSmpl, float4(Out.texCoord, 0, 0)).r;	
	Out.normal = tex2Dlod(RSM_Normals_VertexSmpl, float4(Out.texCoord, 0, 0)).rgb;

	Out.depthWeight.x = depth;

	// get world space position of the texel in the colored shadow map
#if %_RT_SAMPLE1 // camera mx
	// camvec
	half3 vCamVecULerpB = lerp(g_vFrustrumLB, g_vFrustrumRB, texelPos.x);
	half3 vCamVecULerpT = lerp(g_vFrustrumLT, g_vFrustrumRT, texelPos.x);
	half3 vCamVec = lerp(vCamVecULerpT, vCamVecULerpB, texelPos.y);
	float3 worldPos = GetWorldPos(depth, vCamVec);
	float4 homogGridPos = mul(g_injectionMatrix, float4(worldPos, 1));

	// cam space normal
	Out.normal = EXPAND(Out.normal);
	Out.depthWeight.y = saturate(-dot(normalize(vCamVec), normalize(Out.normal)));
	Out.depthWeight.y = pow(Out.depthWeight.y, .3f);
#else
	float4 homogGridPos = mul(g_injectionMatrix, float4(screenPos, depth, 1));
	Out.normal = Out.normal * 2.h - 1.h;
	Out.depthWeight.y = 1.h;
#endif

	// TODO: calc texel area coverage and precalc grid cell projection's area in light direction
	float3 alignedGridPos = homogGridPos.xyz/homogGridPos.w;

	// rounding direction and only one cell shitf
	half3 gridSpaceNormal = normalize(LPVGridDir(Out.normal)) * (/*In.pixelID.y * .1h + */.2h) * g_invGridSize.xyz;
	alignedGridPos -= gridSpaceNormal;
	//alignedGridPos += g_dirToLightGridSpace.xyz * (LIGHT_DEPTH_BIAS/* + (In.pixelID.y * JITTERING_BIAS)*/);

	// calc half-cell shifting
	//alignedGridPos -= g_invGridSize.xyz * 0.5f;
	alignedGridPos.z = floor(alignedGridPos.z * g_gridSize.z) * g_invGridSize.z;

	Out.position = LPVScreenPos(alignedGridPos);

	// Drop the polygon if it's out of the grid
	if(!IsPointInGrid(alignedGridPos))
		Out.position.xy = -2;

	return Out;
}

SHCoeffs LPVOcclusionInjectionPS(const in LPVOcclusionPsIn In)
{
	SHCoeffs res = GetSHCosine(In.normal, true);		// calc output SH coeffs
	res.c *= g_smInvPixelSize.x * In.depthWeight.y * .01f;
	// if we have camera matrix, we should account for area change of each texel due to perspective
#if %_RT_SAMPLE1 
	res.c *=  In.depthWeight.x*10000.f;						// calc perspective weight of surfel in case of camera frustrum
#endif
	return res;
}

technique LPVInjectOcclusion
{
  pass p0
  {
    VertexShader = LPVOcclusionInjectionVS();
    PixelShader = LPVOcclusionInjectionPS();
  }
}

//////////////////////////////////////////////////////////////////////////////////////
// Propagation shader
//////////////////////////////////////////////////////////////////////////////////////

float4 g_PropagationAmp_Iteration < psregister = c11; >;

struct LPVPropagationPsIn
{
	float4 position	 				: POSITION;
	half3 gridPos 					: TEXCOORDN;
};

LPVPropagationPsIn LPVPropagateVS(const in half3 position 	: POSITION)
{
	LPVPropagationPsIn Out;
	Out.gridPos = half3(position.xy, position.z * g_invGridSize.z);	// pos->[0;1]x[0;1]x[0;1)
	Out.gridPos.xy -= g_invGridSize.xy * sign(Out.gridPos.xy * 2.h - 1.h);	// don't propagate on the borders
  Out.position = LPVScreenPos(Out.gridPos);
	return Out;
}

void LPVPropagateDir(inout SHSpectralCoeffs pixelCoeffs, const in LPVPropagationPsIn In, const in half3 nOffset, const in int nIndex)
{
	half2 texCoord = LPVGetTiledTexcoordWithOffset(In.gridPos, nOffset);
	SHSpectralCoeffs sampleCoeffs = SHSampleValueNoFiltering(texCoord);	// get sample's SH coeffs

	SHCoeffs shIncomingDir = SHCone90Degree(-nOffset);
	half fAttenuation = g_PropagationAmp_Iteration.x;

	// indirect occlusion calculation
#if %_RT_SAMPLE3
	half4 occlCoeffs;
	{
		// SH grid look-up + trilinear interpolation for 3D grid
		{
			half zt;	
			half2 roundedGridCoord = LPVTiledTexCoordAndInterpolant(In.gridPos + nOffset * g_invGridSize.xyz, zt);
			half4 occlCoeffs0 = tex2D(RSM_ColorSmpl, roundedGridCoord);
			half4 occlCoeffs1 = tex2D(RSM_ColorSmpl, roundedGridCoord + LPVGetTiledTexcoord(half3(0, 0, g_invGridSize.z)));
			occlCoeffs = lerp(occlCoeffs0, occlCoeffs1, zt);
		}
		// occlusion towards a propagation direction
		half fOcclusion = abs(dot(occlCoeffs, shIncomingDir.c));
		// visibility
		fAttenuation *= saturate(1.h - fOcclusion * 100.f);
	}
#endif

	SHSpectralCoeffs coeffsResult = SHCNormalizeCone90(sampleCoeffs);
	coeffsResult = SHLerp(coeffsResult, shIncomingDir, .5h);
	pixelCoeffs = SHAdd(pixelCoeffs, SHCMul(coeffsResult, max(0, SHDot(sampleCoeffs, shIncomingDir)) * fAttenuation));	// add it to result
}

SHSpectralCoeffs LPVPropagatePS(const in LPVPropagationPsIn In)
{
 	SHSpectralCoeffs pixelCoeffs = (SHSpectralCoeffs)0;

	// differential scheme "cross"
	LPVPropagateDir(pixelCoeffs, In, half3( 1,  0,  0), 1);
	LPVPropagateDir(pixelCoeffs, In, half3(-1,  0,  0), 0);
	LPVPropagateDir(pixelCoeffs, In, half3( 0,  1,  0), 3);
	LPVPropagateDir(pixelCoeffs, In, half3( 0, -1,  0), 2);
	LPVPropagateDir(pixelCoeffs, In, half3( 0,  0,  1), 5);
	LPVPropagateDir(pixelCoeffs, In, half3( 0,  0, -1), 4);

	SHPack(pixelCoeffs);
	return pixelCoeffs;
}

technique LPVPropagate
{
  pass p0
  {
    VertexShader = LPVPropagateVS();
    PixelShader = LPVPropagatePS();
  }
}
//////////////////////////////////////////////////////////////////////////////////////

struct LPVCollectPsIn
{
	float4 position					: POSITION;
	half2 texCoord					: TEXCOORDN;
	half3 worldPosToCenter	: TEXCOORDN;
};

LPVCollectPsIn LPVCollectVS(const in float3 position	: POSITION)
{
	LPVCollectPsIn Out = (LPVCollectPsIn)0;

	const float3 gridPos = float3(position.xy, position.z * g_invGridSize.z);	// pos->[0;1]x[0;1]x[0;1)
  Out.position = LPVScreenPos(gridPos);
	Out.texCoord = LPVGetTiledTexcoord(gridPos);

	return Out;
}

SHSpectralCoeffs LPVCollectPS(const in LPVCollectPsIn In)
{
	SHSpectralCoeffs cRes = SHSampleValueNoFiltering(In.texCoord);
	return cRes;
}

technique LPVCollect
{
  pass p0
  {
    VertexShader = LPVCollectVS();
    PixelShader = LPVCollectPS();
  }
}

//////////////////////////////////////////////////////////////////////////////////////
// Post-inject ready to render lightsource
//////////////////////////////////////////////////////////////////////////////////////

float4 g_lightColor < psregister = c11; >;
float4 g_lightPosition < vsregister = c12; psregister = c12; >;

struct LPVPostinjectLightPsIn
{
	half4 position	 		: POSITION;
	half4 vecFromLight	: TEXCOORDN;	// 1/r in w
	half3 cLightColor		: TEXCOORDN;
	half3 vGridPos			: TEXCOORDN;
};

LPVPostinjectLightPsIn LPVPostinjectLightVS(const in half3 position	: POSITION)
{
	LPVPostinjectLightPsIn Out;

	const half nHalfNumSilces = floor((g_lightColor.w-1)/2);	// half of number of slices to render
	const half z = position.z - nHalfNumSilces;

	half3 snappedGridSpaceLightPos = floor(LPVGridPos(g_lightPosition.xyz) * g_gridSize.xyz) * g_invGridSize.xyz;
	const half3 vGridSpaceRadius = LPVGridDir(g_lightPosition.www);
	snappedGridSpaceLightPos.xy += vGridSpaceRadius.xy * position.xy;
	snappedGridSpaceLightPos.z += z * g_invGridSize.z;

	const float3 vertexWorldPos = LPVWorldPos(snappedGridSpaceLightPos);
	Out.vecFromLight.xyz = vertexWorldPos - g_lightPosition.xyz;
	Out.vecFromLight.w = 1.0h / max(.01h, g_lightPosition.w);	// 1/r

	Out.vGridPos = snappedGridSpaceLightPos;
  Out.position = LPVScreenPos(snappedGridSpaceLightPos);
	Out.cLightColor = g_lightColor.rgb;

	return Out;
}

SHSpectralCoeffs LPVPostinjectLightPS(const in LPVPostinjectLightPsIn In)
{
	LPVClipGridPos(In.vGridPos, false);
  half fAtt = GetAttenuation(In.vecFromLight.xyz, In.vecFromLight.w);

#if %_RT_SAMPLE0 
	// negative lights
	fAtt *= GetLuminance(In.cLightColor);
	SHCoeffs coeffs = SHSampleConst(-fAtt);
	SHSpectralCoeffs outCoeffs;
	outCoeffs.r = coeffs.c;
	outCoeffs.g = coeffs.c;
	outCoeffs.b = coeffs.c;
#else
	fAtt *= fAtt;
	SHCoeffs coeffs = GetSHCosine(In.vecFromLight.xyz, true);
	SHSpectralCoeffs outCoeffs = SHMul(coeffs, In.cLightColor * fAtt * 1.2h);	// x 1.2 because of SH lobe normalization
#endif

	SHPackAddBlend(outCoeffs);

	return outCoeffs;
}

technique LPVPostinjectLight
{
  pass p0
  {
    VertexShader = LPVPostinjectLightVS();
    PixelShader = LPVPostinjectLightPS();
  }
}

//////////////////////////////////////////////////////////////////////////////////////
// Deferred apply shader
//////////////////////////////////////////////////////////////////////////////////////
float4x4	g_mCamera					< vsregister = c8; >;

LPVApplyPsIn LPVApplyVS(float3 position	 	: POSITION)
{
	LPVApplyPsIn Out = (LPVApplyPsIn)0;

	float3 vWorldPos = LPVWorldPos(float4(position, 1));
  Out.position = mul(float4(vWorldPos, 1), g_mCamera);

	float2 vScreenPos = (Out.position.xy/Out.position.w)*.5f + .5f;
	vScreenPos.y = 1.f - vScreenPos.y;
  Out.screenPos.xy = vScreenPos;

	// camvec
	float3 vCamVecULerpB = lerp(g_vFrustrumLB, g_vFrustrumRB, vScreenPos.x);
	float3 vCamVecULerpT = lerp(g_vFrustrumLT, g_vFrustrumRT, vScreenPos.x);
	float3 vCamVec = lerp(vCamVecULerpT, vCamVecULerpB, vScreenPos.y);
	// transform cam vectors into grid space(to reconstruct grid pos from depth)
	Out.GridCamVec = LPVGridDir(vCamVec);

	Out.CamVec = vCamVec;

	// apply perspective correction
	Out.screenPos.z = Out.position.w;
  Out.screenPos.xy = GetScaledScreenTC(Out.screenPos.xy*Out.position.w);
	Out.GridCamVec *= Out.position.w;
	Out.CamVec *= Out.position.w;

	return Out;
}

struct pixoutMRT
{
  half4 Diffuse		: COLOR0;
	half4 Specular  : COLOR1;
};


// the main pass for LPVs
pixoutMRT LPVApplyPS(in LPVApplyPsIn In)
{
  pixoutMRT OUT = (pixoutMRT) 0;

#if %_RT_DEBUG0
 OUT.Diffuse = 0.1;
 return OUT;
#endif

 // Make a perspective compensation in shader in order to have interpolants in screen space
	PrepareInData(In);

#if %_RT_SAMPLE2
	const int nStencilID = tex2D(_tex7, In.screenPos.xy ).x * 255.0f; // rescale stencil ID
	const uint nVisAreaFlags = g_vVisAreasParams[nStencilID].a; 
	if(nVisAreaFlags & VISAREA_IGNORE_GI)
		discard;
#endif
	
	
//#if %_RT_MSAA_QUALITY || %_RT_MSAA_QUALITY1 
//	uint uSample = 0;
//	#if %_RT_MSAA_SAMPLEFREQ_PASS
//		uSample = In.uSample;
// //   clip(tex2D(_tex6, In.screenPos.xy).w-0.5);   // Discard masked samples via clip for shadow passes. Unfortunately cant batch stencil culling at this time
//	#else
//    clip(0.5-tex2D(_tex6, In.screenPos.xy).w); // Discard masked samples via clip. For sample frequency passes we use stencil culling
//  #endif
//
//	// Fetch G-Buffer
//	half3 gridPos = GetPosFromDepthMS( In.screenPos.xy, In.GridCamVec, g_gridSpaceCamPos.xyz, GetMSAASampleNum(), uSample);
//		//GetPosFromDepth(depthMapSamplerBorder, In.screenPos.xy, In.GridCamVec, g_gridSpaceCamPos.xyz);
//  half4 normal = GetSceneNormalsMS( In.screenPos.xy, GetMSAASampleNum(), uSample );
//		//GetWorldSpaceNormals(normalsMapSampler, In.screenPos.xy, false);
//
//#else

	// Fetch G-Buffer
	half3 gridPos = GetPosFromDepth(depthMapSamplerBorder, In.screenPos.xy, In.GridCamVec, g_gridSpaceCamPos.xyz);
  half3 normal = DecodeGBufferNormal( tex2D(normalsMapSampler, In.screenPos.xy) );
//#endif

	// for volume texture border clipping in case of emulating 3D texture with 2D unwrapped texture
#if !%_RT_SAMPLE4
	LPVClipGridPos(gridPos, true);
#endif

	// Main call: fetch diffuse intensity from LPV
	OUT.Diffuse.rgb = LPVGetDifuseIntensity(gridPos, normal.xyz);
	// Also step through LPV to get specular if required
	#if %_RT_SAMPLE0
		// TODO: Use material smoothness if really required
		OUT.Specular.rgb = LPVGetSpecularIntensity(In, half4(normal, 0.5), gridPos);
	#endif

	// Make sure to apply distance-based attenuatiuon from camera
	// in case it's an LPV for global illumination
#if %_RT_SAMPLE1 
	half3 worldPos = 0;
	#if !%_RT_DEBUG1
		//#if %_RT_MSAA_QUALITY || %_RT_MSAA_QUALITY1 
		//	worldPos = GetPosFromDepthMS( In.screenPos.xy, In.CamVec, PS_WorldViewPos.xyz, GetMSAASampleNum(), uSample);
		//#else
			worldPos = GetPosFromDepth( depthMapSamplerBorder, In.screenPos.xy, In.CamVec, PS_WorldViewPos.xyz );
//		#endif
	#endif
	half att = GetGIAtteunation(worldPos);
	OUT.Diffuse.rgb *= att;
	#if %_RT_SAMPLE0	// specular
		OUT.Specular.rgb *= att;
	#endif
#endif

	// custom encoding
	OUT.Diffuse = EncodeLightBuffer(OUT.Diffuse);
	OUT.Specular = EncodeLightBuffer(OUT.Specular);

	return OUT;
}

technique LPVApply
{
  pass p0
  {
    VertexShader = LPVApplyVS() DeferredLightPassVS;
    PixelShader = LPVApplyPS() DeferredLightPassPS;
  }
}

//////////////////////////////////////////////////////////////////////////////////////
