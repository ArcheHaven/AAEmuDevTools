// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#define NULL_COLOR {0, 0, 0, 0}

////////////////////////////////////////////////////////////////////////////////////////////////////
// SH framework

struct SHCoeffs
{
	half4 c : COLOR0;
};

struct SHSpectralCoeffs
{
	half4 r : COLOR0;
	half4 g : COLOR1;
	half4 b : COLOR2;
};

half3 SHDot(const in SHSpectralCoeffs a, const in SHCoeffs b)
{
	half3 res;
	res.r = dot(a.r, b.c);
	res.g = dot(a.g, b.c);
	res.b = dot(a.b, b.c);
	return res;
}

SHSpectralCoeffs SHAdd(const in SHSpectralCoeffs a, const in SHSpectralCoeffs b)
{
	SHSpectralCoeffs res;
	res.r = a.r + b.r;
	res.g = a.g + b.g;
	res.b = a.b + b.b;
	return res;
}

SHSpectralCoeffs SHMul(const in SHCoeffs a, const in half3 color)
{
	SHSpectralCoeffs res;
	res.r = a.c * color.r;
	res.g = a.c * color.g;
	res.b = a.c * color.b;
	return res;
}

SHCoeffs SHLerp(const in SHCoeffs a, const in SHCoeffs b, const in half t)
{
	SHCoeffs res;
	res.c = lerp(a.c, b.c, t);
	return res;
}

SHSpectralCoeffs SHLerp(const in SHSpectralCoeffs a, const in SHSpectralCoeffs b, const in half t)
{
	SHSpectralCoeffs res;
	res.r = lerp(a.r, b.r, t);
	res.g = lerp(a.g, b.g, t);
	res.b = lerp(a.b, b.b, t);
	return res;
}

SHSpectralCoeffs SHLerp(const in SHSpectralCoeffs a, const in SHCoeffs b, const in half t)
{
	SHSpectralCoeffs res;
	res.r = lerp(a.r, b.c, t);
	res.g = lerp(a.g, b.c, t);
	res.b = lerp(a.b, b.c, t);
	return res;
}

SHCoeffs SHSampleConst(const in float intensity)
{
	SHCoeffs res;
	res.c = half4(intensity, 0, 0, 0);
	return res;
}

SHSpectralCoeffs SHCSub(const in SHSpectralCoeffs a, const in SHSpectralCoeffs b)
{
	SHSpectralCoeffs res;
	res.r = a.r - b.r;
	res.g = a.g - b.g;
	res.b = a.b - b.b;
	return res;
}

SHSpectralCoeffs SHCMul(const in SHSpectralCoeffs a, const in half3 color)
{
	SHSpectralCoeffs res;
	res.r = a.r * color.r;
	res.g = a.g * color.g;
	res.b = a.b * color.b;
	return res;
}

SHSpectralCoeffs SHMulSpectral(const in SHCoeffs a, const in half3 color)
{
	SHSpectralCoeffs res;
	res.r = a.c * color.r;
	res.g = a.c * color.g;
	res.b = a.c * color.b;
	return res;
}

half3 SHCDot(const in SHSpectralCoeffs a, const in SHSpectralCoeffs b)
{
	half3 res;
	res.r = dot(a.r, b.r);
	res.g = dot(a.g, b.g);
	res.b = dot(a.b, b.b);
	return res;
}

#define EPS_THRESHOLD (0.05f)

void SHCNormalizeBands(inout SHSpectralCoeffs res)
{
	// extract direction
	half lr = dot(res.r.gba, res.r.gba);
	res.r.gba /= max(EPS_THRESHOLD, sqrt(lr));
	half lg = dot(res.g.gba, res.g.gba);
	res.g.gba /= max(EPS_THRESHOLD, sqrt(lg));
	half lb = dot(res.b.gba, res.b.gba);
	res.b.gba /= max(EPS_THRESHOLD, sqrt(lb));
}

SHSpectralCoeffs SHCNormalizeCone90(in SHSpectralCoeffs res)
{
	SHCNormalizeBands(res);

	static const half c = 0.146447h;	//	1/2 (1 - 1/Sqrt[2])
	static const half k = 0.375h;			//	3 / 8

	res.r.gba *= k;
	res.g.gba *= k;
	res.b.gba *= k;

	res.r.r = c;
	res.g.r = c;
	res.b.r = c;

	return res;
}

SHSpectralCoeffs SHCNormalize(in SHSpectralCoeffs res)
{
	SHCNormalizeBands(res);
	res.r.r = 1.0;
	res.g.r = 1.0;
	res.b.r = 1.0;
	return res;
}

SHCoeffs GetSHDir(in half3 dir, bool norm)
{
	static const half c = 0.282094792h;	//	1.f / sqrt(4.f * 3.141592652f))
	static const half k = 0.488602512h;	//	sqrt(3.f / (4.f * 3.141592652f))
	if(norm)
		dir = normalize(dir);
	SHCoeffs ret;
	ret.c.x = c;
	ret.c.yzw = half3(-k, k, -k) * dir.yzx;
	return ret;
}

SHCoeffs SHCone90Degree(in half3 vcDir)
{
	static const half c = 0.146447h;		//	1/2 (1 - 1/Sqrt[2])
	static const half k = 0.375h;				//	3 / 8

	SHCoeffs ret;
	ret.c = half4(c, half3(-k, k, -k) * vcDir.yzx);
	return ret;
}

SHCoeffs GetSHCosine(in half3 dir, bool norm)
{
	static const half c = 0.886227h;		//0.25h;	//1.77245385h;	// sqrt( PI )								//
	static const half k = 1.02333h;				//1.1816359h;		// sqrt( 4.0f * PI ) / 3.0f	//

	if(norm)
		dir = normalize(dir);

	SHCoeffs ret;
	ret.c.x = c; 
	ret.c.yzw = half3(-k, k, -k) * dir.yzx;

	return ret;
}

void SHPack(inout SHSpectralCoeffs coeffs)
{
}

void SHPackAddBlend(inout SHSpectralCoeffs coeffs)
{
}

void SHUnpack(inout SHSpectralCoeffs coeffs)
{
}

//////////////////////////////////////////////////////////////////////////////////////
// Samplers
//////////////////////////////////////////////////////////////////////////////////////

sampler2D depthMapSamplerBorder = sampler_state
{
  Texture = $ZTarget;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = NONE; 
  AddressU = Border;
  AddressV = Border;
  BorderColor = {0, 0, 0, 0};
	sRGBLookup = false;
};

sampler2D normalsMapSampler = sampler_state
{
  Texture = $SceneNormalsMap;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = POINT; 
  AddressU = Border;
  AddressV = Border;
  BorderColor = {0, 0, 0, 0};
	sRGBLookup = false;
};

Texture2DMS<float4> depthMapSamplerBorderMS  : TS_ZTargetMS;

half4 GetSceneDepthMS( float2 baseTC, int NumSamples, int nCurrSample ) 
{
	int3 vPixCoord = int3( baseTC * PS_ScreenSize.xy, 0);
  return depthMapSamplerBorderMS.Load(vPixCoord, nCurrSample);
}

half3 GetPosFromDepthMS( const in half2 tc, const in half3 vCamVec, const in float3 vCamPos, int NumSamples, int nCurrSample )
{
  const float fDepth = GetSceneDepthMS( tc, NumSamples, nCurrSample);
  return fDepth * vCamVec + vCamPos; // Return position
}

sampler2D LPV_R_Sampler = sampler_state
{
  Texture = $LPV_Red_RT;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = NONE; 
  AddressU = Border;
  AddressV = Border;
  BorderColor = NULL_COLOR;
	sRGBLookup = false;
};

sampler3D LPV_R_3DSampler = sampler_state
{
  Texture = $LPV_Red_RT;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = NONE; 
  AddressU = Border;
  AddressV = Border;
  AddressW = Border;
  BorderColor = NULL_COLOR;
	sRGBLookup = false;
};

sampler2D LPV_R_PointSampler = sampler_state
{
  Texture = $LPV_Red_RT;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = NONE; 
  AddressU = Border;
  AddressV = Border;
  BorderColor = NULL_COLOR;
	sRGBLookup = false;
};

sampler2D LPV_G_Sampler = sampler_state
{
  Texture = $LPV_Green_RT;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = NONE; 
  AddressU = Border;
  AddressV = Border;
  BorderColor = NULL_COLOR;
	sRGBLookup = false;
};

sampler3D LPV_G_3DSampler = sampler_state
{
  Texture = $LPV_Green_RT;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = NONE; 
  AddressU = Border;
  AddressV = Border;
  AddressW = Border;
  BorderColor = NULL_COLOR;
	sRGBLookup = false;
};

sampler2D LPV_G_PointSampler = sampler_state
{
  Texture = $LPV_Green_RT;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = NONE; 
  AddressU = Border;
  AddressV = Border;
  BorderColor = NULL_COLOR;
	sRGBLookup = false;
};

sampler2D LPV_B_Sampler = sampler_state
{
  Texture = $LPV_Blue_RT;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = NONE; 
  AddressU = Border;
  AddressV = Border;
  BorderColor = NULL_COLOR;
	sRGBLookup = false;
};

sampler3D LPV_B_3DSampler = sampler_state
{
  Texture = $LPV_Blue_RT;
  MinFilter = LINEAR;
  MagFilter = LINEAR;
  MipFilter = NONE; 
  AddressU = Border;
  AddressV = Border;
  AddressW = Border;
  BorderColor = NULL_COLOR;
	sRGBLookup = false;
};

sampler2D LPV_B_PointSampler = sampler_state
{
  Texture = $LPV_Blue_RT;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = NONE; 
  AddressU = Border;
  AddressV = Border;
  BorderColor = NULL_COLOR;
	sRGBLookup = false;
};

sampler2D RSM_ColorSmpl = sampler_state
{
  Texture = $RSM_Flux_RT;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = NONE; 
  AddressU = Clamp;
  AddressV = Clamp;
};

sampler2D RSM_NormalsSmpl = sampler_state
{
  Texture = $RSM_Normals_RT;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = NONE; 
  AddressU = Clamp;
  AddressV = Clamp;
	sRGBLookup = false;
};

sampler2D RSM_DepthSmpl = sampler_state
{
  Texture = $RSM_Depth_RT;
  MinFilter = POINT;
  MagFilter = POINT;
  MipFilter = NONE; 
  AddressU = Clamp;
  AddressV = Clamp;
	sRGBLookup = false;
};

//////////////////////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////////////////////

float4x4 	g_gridMatrix			: PB_GIGridMatrix;		// 	< vsregister = c4; psregister = c0; >
float4x4 	g_invGridMatrix		: PB_GIInvGridMatrix;			// 	< vsregister = c0; >
float4		g_gridSize				: PB_GIGridSize;				// 	< vsregister = c10; psregister = c5; >
float4		g_invGridSize			: PB_GIInvGridSize;			// 	< vsregister = c11; psregister = c6; >
float4		g_gridSpaceCamPos	: PB_GIGridSpaceCamPos;	// 	< psregister = c21; >
float4		g_vGIAttenuation	: PB_GIAttenuation;			//		< vsregister = c12; psregister = c11; >;
float4		g_gridCenter			: PB_GIGridCenter;			//< vsregister = c13; psregister = c12; >;

//////////////////////////////////////////////////////////////////////////////////////
// Grid space framework
//////////////////////////////////////////////////////////////////////////////////////

SHSpectralCoeffs SHSampleValue(const in half2 gridCoord)
{
	SHSpectralCoeffs c;
	c.r = tex2D(LPV_R_Sampler, gridCoord);
	c.g = tex2D(LPV_G_Sampler, gridCoord);
	c.b = tex2D(LPV_B_Sampler, gridCoord);
	SHUnpack(c);
	return c;
}

SHSpectralCoeffs SHSampleValueNoFiltering(const in half2 gridCoord)
{
	SHSpectralCoeffs c;
	c.r = tex2D(LPV_R_PointSampler, gridCoord);
	c.g = tex2D(LPV_G_PointSampler, gridCoord);
	c.b = tex2D(LPV_B_PointSampler, gridCoord);
	SHUnpack(c);
	return c;
}

float3 LPVWorldPos(const in half3 gridPos)
{
	return mul((float3x4)g_invGridMatrix, float4(gridPos, 1));
}

half3 LPVWorldDir(const in half3 vDirection)
{
	return mul((half3x3)g_invGridMatrix, vDirection);
}

half3 LPVGridPos(const in float3 worldPos)
{
	return mul((float3x4)g_gridMatrix, float4(worldPos, 1));
}

half3 LPVGridDir(const in half3 vDirection)
{
	return mul((half3x3)g_gridMatrix, vDirection);
}

float4 LPVScreenPos(const in float3 gridPos)
{
	float2 tiledPos = gridPos.xy;
	tiledPos.x = tiledPos.x * g_invGridSize.z + gridPos.z;
	tiledPos = tiledPos * float2(2, -2) - float2(1, -1);		// to [-1;1]
	return float4(tiledPos, 0, 1);
}

half2 LPVGetTiledTexcoord(const in half3 gridPos)
{
	half2 texCoord = gridPos.xy;
	texCoord.x *= g_invGridSize.z;
	texCoord.x += gridPos.z;
	return texCoord;
}

half2 LPVGetTiledTexcoordWithOffset(const in half3 gridPos, const in half3 nOffset)
{
	return LPVGetTiledTexcoord(gridPos + nOffset * g_invGridSize.xyz);
}

half2 LPVTiledTexCoordAndInterpolant(const in half3 gridPos, out half zt)
{
	const float zq = floor(gridPos.z * g_gridSize.z) * g_invGridSize.z;
	zt = (gridPos.z - zq) * g_gridSize.z;
	return LPVGetTiledTexcoord(half3(gridPos.xy, zq));
}

bool IsPointInGrid(const in half3 gridPos)
{
	const float3 diffLength = (float3)gridPos - saturate((float3)gridPos);
	return dot(diffLength, diffLength) < 0.0000001f;
}

void LPVClipGridPos(const in half3 gridPos, bool bTexCenterBoundaries)
{
	half3 check = half3(.5h, .5h, .5h) - abs(gridPos - half3(.5h, .5h, .5h));
	if(bTexCenterBoundaries)
		check -= g_invGridSize.xyz * 0.5h;
	clip(check);
}

//////////////////////////////////////////////////////////////////////////////////////
// Deferred apply framework
//////////////////////////////////////////////////////////////////////////////////////

struct LPVApplyPsIn
{
	float4 position 	: POSITION;
	float3 screenPos 	: TEXCOORD0;
	half3 GridCamVec 	: TEXCOORD1;
	half3 CamVec 			: TEXCOORD2;

	//MSAA_SAMPLE_INDEX_PS
};

SHSpectralCoeffs SHSampleValueTrilinear(const in half3 gridCoord)
{
#if %_RT_SAMPLE4 // volume texture
	SHSpectralCoeffs c;
	c.r = tex3D(LPV_R_3DSampler, gridCoord);
	c.g = tex3D(LPV_G_3DSampler, gridCoord);
	c.b = tex3D(LPV_B_3DSampler, gridCoord);
	SHUnpack(c);
	return c;
#else
	half zt;	// SH grid look-up + trilinear interpolation for 3D grid
	const half2 roundedGridCoord = LPVTiledTexCoordAndInterpolant(gridCoord, zt);
	const SHSpectralCoeffs coeffs0 = SHSampleValue(roundedGridCoord);
	const SHSpectralCoeffs coeffs1 = SHSampleValue(roundedGridCoord + LPVGetTiledTexcoord(half3(0, 0, g_invGridSize.z)));
	return SHLerp(coeffs0, coeffs1, zt);
#endif
}

SHSpectralCoeffs SHSampleValueBilateral(const in half3 gridCoord, const in half3 vNormal)
{
	SHSpectralCoeffs cPoint = SHSampleValueTrilinear(gridCoord);
	// for PC version use aniso difference-based dumpening
	half3 vGridSpaceNormal = normalize(LPVGridDir(vNormal)) * g_invGridSize.xyz * 0.2h;
	SHSpectralCoeffs cDir = SHSampleValueTrilinear(gridCoord + vGridSpaceNormal);
	SHSpectralCoeffs cGrad = SHCSub(cDir, cPoint);
	half3 vAtten = saturate(SHCDot(SHCNormalize(cPoint), SHCNormalize(cGrad)));
	vAtten = max(vAtten.r, max(vAtten.g, vAtten.b));
	return SHCMul(cPoint, pow(vAtten, .1f));//cPoint;//
}

half3 GetPosFromDepth( const in sampler2D smpDepth, const in half2 tc,
												const in half3 vCamVec, const in float3 vCamPos )
{
  const float fDepth = GetLinearDepth( smpDepth, tc );
  return fDepth * vCamVec + vCamPos; // Return position
}

half3 LPVGetDifuseIntensity(const in half3 gridPos, const in half3 normal)
{
	// SH grid look-up + tirilinear interpolation for 3D grid
#if !%_RT_GLOBAL_ILLUMINATION && %_RT_SAMPLE1 // sticked to camera
	SHSpectralCoeffs coeffs = SHSampleValueBilateral(gridPos, normal);	// bilateral upsampling for GI
#else
	SHSpectralCoeffs coeffs = SHSampleValueTrilinear(gridPos);
#endif
	// calc final SH dot product
	SHCoeffs normalCoeffs = GetSHDir(-normal, true);
	half3 result = SHDot(coeffs, normalCoeffs);
	result = max(0, result);
	return result;
}

half GetGIAtteunation(const in half3 worldPos)
{
	// world-space attenuation
	half att = (half)g_vGIAttenuation.z;
#if !%_RT_DEBUG1
	// On consoles we premultiply the attenuation into the LPV grid
	att *= saturate(distance((half3)g_gridCenter.xyz, worldPos) * (half)g_vGIAttenuation.x + (half)g_vGIAttenuation.y);
#endif
	return att;
}

half3 LPVGetGlobalIllumination(const in half3 normal, const in half3 worldPos)
{
	half3 vGridPos = LPVGridPos(worldPos);
	half3 cGIColor = LPVGetDifuseIntensity(vGridPos, normal);
	cGIColor *= GetGIAtteunation(worldPos);
	return cGIColor;
}

half3 LPVGetSpecularIntensity(const in LPVApplyPsIn In, const in half4 normal, const in half3 gridPos)
{
#define STEP_DISTANCE 1.h
#define SPEC_AMP 5.h
#define SPEC_NUM_STEPS 3

	// calc specular component
	half3 specular = 0;

	// specular is disabled on consoles
	const float3 worldPos = GetPosFromDepth( depthMapSamplerBorder, In.screenPos.xy, In.CamVec, PS_WorldViewPos.xyz );
	const half3 vcReflectedEye = normalize(reflect(half3(worldPos - PS_WorldViewPos.xyz), normal.xyz));
	const SHCoeffs dirCoeffs = GetSHDir(-vcReflectedEye, false);

	const half specPower = normal.a*255.h;

	const half3 vcReflectedRayStepOffsetGridSpace = LPVGridDir(vcReflectedEye * STEP_DISTANCE) * (specPower / 16.h);
	// TODO: make proper steps and optimize
	for(int k=0;k<SPEC_NUM_STEPS;k++)
	{
		const half kOff = k + 0.1;
		const half3 stepOffset = vcReflectedRayStepOffsetGridSpace * kOff;											// calc next step's offset
		const half3 stepGridPos = gridPos + stepOffset;																			// Grid space position
		if(IsPointInGrid(stepGridPos))
		{
			const SHSpectralCoeffs specCoeffs = SHSampleValueTrilinear(stepGridPos);						// sampled value
			const half att = saturate(SPEC_AMP / (kOff * kOff * STEP_DISTANCE * STEP_DISTANCE));			// distant atenuation
			const half3 irrSample = SHDot(specCoeffs, dirCoeffs) * att;													// collect specular along reflected eye ray
			specular += max(half3(0, 0, 0), irrSample);
		}
	}

	specular/=SPEC_NUM_STEPS;
	return specular;
}

void PrepareInData(inout LPVApplyPsIn In)
{
	float rW = 1.f / In.screenPos.z;
	In.screenPos.xy *= rW;
	In.GridCamVec *= rW;
	In.CamVec *= rW;
}

//////////////////////////////////////////////////////////////////////////////////////
